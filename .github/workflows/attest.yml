on:
  workflow_call:
    inputs:
      asset-name:
        description: 'Name of the asset to be scanned'
        type: string
        required: true
      api-url:
        type: string
        required: false
        default: "https://api.devguard.org"
      path:
        description: 'Path to the source code to be scanned'
        type: string
        required: false
        default: "/github/workspace"
      artifact-name:
        type: string
        required: false
        default: 'container'
        description: "The name of the artifact you are building. This is useful when a single pipeline builds more than a single artifact like a container with a shell inside and one without. If you build a single artifact - leave it empty."
    secrets:
      devguard-token:
        description: 'DevGuard API token'
        required: true


jobs:
  attest:
    runs-on: ubuntu-latest
    steps:
    - name: Download image-digest artifact (can be created by build-image)
      uses: actions/download-artifact@v4
      with:
        name: image-digest${{ inputs.artifact-name}}
        path: .
      continue-on-error: true
    - name: Download image-tag artifact (can be created by build-image)
      uses: actions/download-artifact@v4
      with:
        name: image-tag${{ inputs.artifact-name }}
        path: .
    - name: Get SBOM
      uses: docker://ghcr.io/l3montree-dev/devguard/scanner:main-latest
      with:
        args: >
          sh -c "
            slug=$(devguard-scanner slug ${{ github.ref_name }}) && devguard-scanner get '${{ inputs.api-url }}/api/v1/organizations/${{ inputs.asset-name }}/refs/'$slug'/artifacts/${{ inputs.artifact-name }}/sbom.json' --token='${{ secrets.devguard-token }}' > sbom.json
          "
    - name: Get VeX
      uses: docker://ghcr.io/l3montree-dev/devguard/scanner:main-latest
      with:
        args: >
            sh -c " 
            slug=$(devguard-scanner slug ${{ github.ref_name }}) && devguard-scanner get '${{ inputs.api-url }}/api/v1/organizations/${{ inputs.asset-name }}/refs/'$slug'/artifacts/${{ inputs.artifact-name }}/vex.json' --token='${{ secrets.devguard-token }}' > vex.json
            "
    - name: Get SAST-Results
      uses: docker://ghcr.io/l3montree-dev/devguard/scanner:main-latest
      with:
         args: >
            sh -c " 
            slug=$(devguard-scanner slug ${{ github.ref_name }}) && devguard-scanner get '${{ inputs.api-url }}/api/v1/organizations/${{ inputs.asset-name }}/refs/'$slug'/sarif.json' --token='${{ secrets.devguard-token }}' > sarif.json
            "
    - name: Attest SBOM
      uses: docker://ghcr.io/l3montree-dev/devguard/scanner:main-latest
      with:
        args: >
          sh -c "
            if [ -f image-digest.txt ]; then
              devguard-scanner attest -u ${{ github.actor }} -r ghcr.io -p ${{ secrets.GITHUB_TOKEN }} sbom.json --predicateType='https://cyclonedx.org/bom' \"$(cat image-tag.txt)@$(cat image-digest.txt)\" --token='${{ secrets.devguard-token }}' --apiUrl=${{ inputs.api-url }} --assetName=${{ inputs.asset-name }} --ref=${{ github.ref_name }} 
            else
              devguard-scanner attest sbom.json --predicateType='https://cyclonedx.org/bom' --token='${{ secrets.devguard-token }}' --apiUrl=${{ inputs.api-url }} --assetName=${{ inputs.asset-name }} --ref=${{ github.ref_name }} 
            fi
          "
    - name: Attest VeX
      uses: docker://ghcr.io/l3montree-dev/devguard/scanner:main-latest
      with:
        args: >
          sh -c "
            if [ -f image-digest.txt ]; then
              devguard-scanner attest -u ${{ github.actor }} -r ghcr.io -p ${{ secrets.GITHUB_TOKEN }} vex.json \"$(cat image-tag.txt)@$(cat image-digest.txt)\" --token='${{ secrets.devguard-token }}' --predicateType='https://cyclonedx.org/vex' --apiUrl=${{ inputs.api-url }} --assetName=${{ inputs.asset-name }} --ref=${{ github.ref_name }} 
            else
              devguard-scanner attest vex.json --predicateType='https://cyclonedx.org/vex' --token='${{ secrets.devguard-token }}' --apiUrl=${{ inputs.api-url }} --assetName=${{ inputs.asset-name }} --ref=${{ github.ref_name }} 
            fi
          "
    - name: Attest SAST-Results
      uses: docker://ghcr.io/l3montree-dev/devguard/scanner:main-latest
      with:
        args: >
          sh -c "
            if [ -f image-digest.txt ]; then
              devguard-scanner attest -u ${{ github.actor }} -r ghcr.io -p ${{ secrets.GITHUB_TOKEN }} sarif.json \"$(cat image-tag.txt)@$(cat image-digest.txt)\" --predicateType='https://www.schemastore.org/schemas/json/sarif-2.1.0.json' --token='${{ secrets.devguard-token }}' --apiUrl=${{ inputs.api-url }} --assetName=${{ inputs.asset-name }} --ref=${{ github.ref_name }}
            else
              devguard-scanner attest sarif.json --predicateType='https://www.schemastore.org/schemas/json/sarif-2.1.0.json' --token='${{ secrets.devguard-token }}' --apiUrl=${{ inputs.api-url }} --assetName=${{ inputs.asset-name }} --ref=${{ github.ref_name }}
            fi
          "
    # download build-provenance.json if it exists
    - name: Download build-provenance.json
      uses: actions/download-artifact@v4
      with:
        name: build${{ inputs.artifact-name }}.provenance.json
    - name: Attest build-provenance.json
      uses: docker://ghcr.io/l3montree-dev/devguard/scanner:main-latest
      continue-on-error: true
      with:
        args: >
          sh -c "
            if [ -f image-digest.txt ]; then
              devguard-scanner attest -u ${{ github.actor }} -r ghcr.io -p ${{ secrets.GITHUB_TOKEN }} build.provenance.json \"$(cat image-tag.txt)@$(cat image-digest.txt)\" --predicateType='https://slsa.dev/provenance/v1' --token='${{ secrets.devguard-token }}' --apiUrl=${{ inputs.api-url }} --assetName=${{ inputs.asset-name }} --ref=${{ github.ref_name }} 
            else
              devguard-scanner attest build.provenance.json --token='${{ secrets.devguard-token }}' --apiUrl=${{ inputs.api-url }} --predicateType='https://slsa.dev/provenance/v1' --assetName=${{ inputs.asset-name }} --ref=${{ github.ref_name }} 
            fi
          "
