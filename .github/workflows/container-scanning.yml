on:
  workflow_call:
    inputs:
      asset-name:
        description: 'Name of the asset to be scanned'
        type: string
        required: true
      api-url:
        type: string
        required: false
        default: "https://api.main.devguard.org"
      image-path:
        description: 'Path to the Docker image to be scanned'
        type: string
        required: false
        default: "image.tar"
      artifact-suffix:
        description: 'This is only needed if you are using this job multiple times in the same workflow. For example if you are scanning multiple images build from the same source with different configuration.'
        type: string
        required: false
        default: ""
      fetch_image_from_registry:
        description: 'If set to true, the image will be pulled from the registry instead of using the artifact.'
        type: boolean
        required: false
        default: false
    secrets:
      devguard-token:
        description: 'DevGuard API token'
        required: true

jobs:
  container-scanning:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
        persist-credentials: true
    - name: Download Docker image - if exists (gets created by build-image).If running this workflow independently, the image must be built first and provided as an artifact with the name 'oci-image'. See build-image.yml for more details.
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: oci-image${{ inputs.artifact-suffix }}
        path: .
      if: ${{ inputs.fetch_image_from_registry }} == false

    - name: Setup crane
      uses: imjasonh/setup-crane@v0.1

    - name: Download OCI Image from registry
      run: |
        crane pull $(cat image-tag.txt) image.tar
      if: ${{ inputs.fetch_image_from_registry }} == true

    - name: DevGuard Container-Scanning
      uses: docker://ghcr.io/l3montree-dev/devguard-scanner:main-latest
      with:
        args: devguard-scanner container-scanning --assetName=${{ inputs.asset-name }}   --apiUrl=${{ inputs.api-url }} --token="${{ secrets.devguard-token }}" --path=${{ inputs.image-path }}
