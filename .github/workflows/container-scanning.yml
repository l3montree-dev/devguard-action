on:
  workflow_call:
    inputs:
      asset-name:
        description: 'Name of the asset to be scanned'
        type: string
        required: true
      api-url:
        type: string
        required: false
        default: "https://api.main.devguard.org"
      image-path:
        description: 'Path to the Docker image to be scanned'
        type: string
        required: false
        default: "image.tar"
      risk-management:
        description: 'Determines if the detected risks need to be managed. This should be done for the default branch during development and for releases (tags). That is the default already'
        type: string
        required: false
        default: 'null'
      artifact-suffix:
        description: 'This is only needed if you are using this job multiple times in the same workflow. For example if you are scanning multiple images build from the same source with different configuration.'
        type: string
        required: false
        default: ""
    secrets:
      devguard-token:
        description: 'DevGuard API token'
        required: true

jobs:
  container-scanning:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        persist-credentials: false

    - name: Determine risk-management value
      id: set-risk
      run: |
        if [[ "${RISK_MANAGEMENT}" != "null" ]]; then
          # Respect the manually provided input
          echo "risk-management=${RISK_MANAGEMENT}" >> $GITHUB_ENV
        else
          # Set risk-management based on branch or tag if not manually provided
          if [[ "${REF}" == "refs/heads/${DEFAULT_BRANCH}" || "${REF}" == refs/tags/* ]]; then
            echo "risk-management=true" >> $GITHUB_ENV
          else
            echo "risk-management=false" >> $GITHUB_ENV
          fi
        fi
      env:
        RISK_MANAGEMENT: ${{ inputs.risk-management }}
        REF: ${{ github.ref }}
        DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}

    - name: Download Docker image - if exists (gets created by build-image).If running this workflow independently, the image must be built first and provided as an artifact with the name 'oci-image'. See build-image.yml for more details.
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: oci-image${{ inputs.artifact-suffix }}
        path: .

    - name: DevGuard Container-Scanning
      uses: docker://ghcr.io/l3montree-dev/devguard-scanner:0.8.2
      with:
        args: devguard-scanner container-scanning --assetName=${{ inputs.asset-name }}   --apiUrl=${{ inputs.api-url }} --token="${{ secrets.devguard-token }}" --path=${{ inputs.image-path }} --riskManagement=${{ env.risk-management }}
