on:
  workflow_call:
    inputs:
      image-destination-path:
        description: 'Destination of the image.tar file'
        type: string
        required: false
        default: "image.tar"
      image:
        description: 'OCI image name, includes the tag name'
        type: string
        required: false
      context:
        description: 'Path to the oci context'
        type: string
        required: false
        default: "."
      dockerfile:
        description: 'Path to the Dockerfile'
        type: string
        required: false
        default: "Dockerfile"

jobs:
  build-image:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Calculate a tag name
    # If the image input is provided, use it as the tag
    # If the workflow is triggered by a tag, use the tag as the tag
    # Otherwise built GitOps compatible tags. Fallback to the branch name, commit hash, and timestamp. Those tags are sortable and  unique.
    - name: Set IMAGE_TAG
      run: |
        if [ "${{ inputs.image }}" != "" ]; then
          IMAGE_TAG="${{ inputs.image }}"
        elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
          IMAGE_TAG="ghcr.io/${{ github.repository }}:${GITHUB_REF#refs/tags/}"
        else
          branch=${GITHUB_REF##*/}
          sha=${GITHUB_SHA::8}
          ts=$(date +%s)
          IMAGE_TAG="ghcr.io/${{ github.repository }}:${branch}-${sha}-${ts}"
        fi
        echo "$IMAGE_TAG" > image-tag.txt

        # necessary for the kaniko job
        echo "IMAGE_TAG=$(cat image-tag.txt)" >> $GITHUB_ENV

    - name: Build Docker image with Kaniko
      # Building the Docker image using Kaniko
      id: build_image
      uses: docker://gcr.io/kaniko-project/executor:v1.23.0
      with:
        args: --destination=${{ env.IMAGE_TAG }} --context=${{ inputs.context }}
          --dockerfile=${{ inputs.dockerfile }} --no-push --tarPath
          /github/workspace/tmp-image.tar

    - name: Move the image.tar to the destination path
      run: mv tmp-image.tar ${{ inputs.image-destination-path }}

    - name: Setup crane
      uses: imjasonh/setup-crane@v0.1

    - name: Use crane to get the digest
      run: crane digest --tarball=${{ inputs.image-destination-path }} > digest.txt

    # Uploading the built Docker image as an artifact
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: oci-image
        path: ${{ inputs.image-destination-path }}

    # Uploading the built Docker image digest as an artifact
    - name: Upload digest
      uses: actions/upload-artifact@v4
      with:
        name: digest
        path: digest.txt

    # Upload the calculated image tag as an artifact
    - name: Upload image tag
      uses: actions/upload-artifact@v4
      with:
        name: image-tag
        path: image-tag.txt
