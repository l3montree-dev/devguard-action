on:
  workflow_call:
    inputs:
      image-destination-path:
        description: 'Destination of the image.tar file'
        type: string
        required: false
        default: "image.tar"
      image:
        description: 'OCI image name, includes the tag name'
        type: string
        required: false
      asset-name:
        description: 'Name of the asset'
        type: string
        required: true
      api-url:
        description: 'URL of the DevGuard API'
        type: string
        required: false
        default: "https://api.devguard.org"
      artifact-name:
        type: string
        required: false
        default: ''
        description: "The name of the artifact you are building. This is useful when a single pipeline builds more than a single artifact like a container with a shell inside and one without. If you build a single artifact - leave it empty." 
      disable-artifact-registry-as-image-store:
        required: false
        default: false
        type: boolean
        description: "If the artifact size is too big for your github usage quota, set this to true. This will push the image directly to the registry instead of uploading it as artifact."
      image-suffix:
        description: 'Suffix for the image name. You probably need this if you are building multiple images. For example building a <abc>/scanner image and a <abc>/web image.'
        type: string
        required: false
        default: ''
    secrets:
      devguard-token:
        description: 'DevGuard API token'
        required: true
      build-args:
        description: 'Build arguments. Useful to overwrite context and dockerfile. Maybe even add additional build args.'
        required: false

jobs:
  build-image:
    runs-on: ubuntu-latest
    steps:
    - name: Set BUILD_ARGS
      run: |
        if [ -z "${{ secrets.build-args }}" ]; then
          BUILD_ARGS="--context=. --dockerfile=Dockerfile"
        else
          BUILD_ARGS="${{ secrets.build-args }}"
        fi

        echo "BUILD_ARGS=$BUILD_ARGS --no-push --tarPath /github/workspace/tmp-image.tar" >> $GITHUB_ENV
        
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        persist-credentials: false
    - name: In-Toto Provenance record start
      id: in-toto-start
      uses: docker://ghcr.io/l3montree-dev/devguard/scanner:main-latest
      with:
        args: devguard-scanner intoto start --step=build --token=${{ secrets.devguard-token }} --apiUrl=${{ inputs.api-url }} --assetName=${{ inputs.asset-name }} --supplyChainId=${{ github.sha }}
      continue-on-error: true

    - name: Setup crane
      uses: imjasonh/setup-crane@v0.1

    - name: Build Docker image with Kaniko
      # Building the Docker image using Kaniko
      id: build_image
      uses: docker://ghcr.io/l3montree-dev/kaniko/executor:v1.26.0-debug
      with:
        args: ${{ env.BUILD_ARGS }}

    - name: Move the image.tar to the destination path
      run: mv tmp-image.tar "${IMAGE_DESTINATION_PATH}"
      env:
        IMAGE_DESTINATION_PATH: ${{ inputs.image-destination-path }}
  
    - name: Use crane to get the digest
      run: |
        crane digest --tarball="${IMAGE_DESTINATION_PATH}" > image-digest.txt
      env:
        IMAGE_DESTINATION_PATH: ${{ inputs.image-destination-path }}

    # Uploading the built Docker image as an artifact
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: oci-image${{ inputs.image-suffix }}
        path: ${{ inputs.image-destination-path }}
      if: inputs.disable-artifact-registry-as-image-store == false

    # Calculate a tag name
    # If the image input is provided, use it as the tag
    # If the workflow is triggered by a tag, use the tag as the tag
    # Otherwise built GitOps compatible tags. Fallback to the branch name, commit hash, and timestamp. Those tags are sortable and  unique.
    - name: Set IMAGE_TAG
      run: |
        if [ "${IMAGE}" != "" ]; then
          IMAGE_TAG="${IMAGE}"
        elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
          if [ "${IMAGE_SUFFIX}" != "" ]; then
            IMAGE_TAG="ghcr.io/${{ github.repository }}/${IMAGE_SUFFIX}:${GITHUB_REF#refs/tags/}"  
          else
            IMAGE_TAG="ghcr.io/${{ github.repository }}:${GITHUB_REF#refs/tags/}"  
          fi

        else
          branch=${GITHUB_REF##*/}
          sha=${GITHUB_SHA::8}
          ts=$(date +%s)
            if [ "${IMAGE_SUFFIX}" != "" ]; then
              IMAGE_TAG="ghcr.io/${{ github.repository }}/${IMAGE_SUFFIX}:${branch}-${sha}-${ts}"
            else
              IMAGE_TAG="ghcr.io/${{ github.repository }}:${branch}-${sha}-${ts}"
            fi
        fi

        IMAGE_TAG=$(echo "$IMAGE_TAG" | tr '[:upper:]' '[:lower:]')
        echo "$IMAGE_TAG" > image-tag.txt

        # necessary for the kaniko job
        echo "IMAGE_TAG=$(cat image-tag.txt)" >> $GITHUB_ENV
      env:
        IMAGE_SUFFIX: ${{ inputs.image-suffix }}  
        IMAGE: ${{ inputs.image }}

    - name: Upload to container registry
      run: |
        crane push "${IMAGE_DESTINATION_PATH}" $(cat image-tag.txt)
      env:
        IMAGE_DESTINATION_PATH: ${{ inputs.image-destination-path }}
      if: inputs.disable-artifact-registry-as-image-store == true

    # Uploading the built Docker image digest as an artifact
    - name: Upload digest
      uses: actions/upload-artifact@v4
      with:
        name: image-digest${{ inputs.image-suffix }}
        path: image-digest.txt

    - name: Set Artifact purl
      run: |
        if [ -n "$ARTIFACT_NAME" ]; then
          PURL="$ARTIFACT_NAME"
        else
          IMAGE_TAG=$(cat image-tag.txt)
          REGISTRY_AND_IMAGE=${IMAGE_TAG%:*}
          VERSION=${IMAGE_TAG##*:}
          NAMESPACE_AND_NAME=${REGISTRY_AND_IMAGE#*/}
          NAME=${NAMESPACE_AND_NAME##*/}
          REPOSITORY_URL="$REGISTRY_AND_IMAGE"
          PURL="pkg:oci/$NAME?repository_url=$REPOSITORY_URL&tag=$VERSION"
        fi

        echo "$PURL" > artifact-purl.txt
        echo "PURL=$PURL" >> $GITHUB_ENV
      env:
        ARTIFACT_NAME: ${{ inputs.artifact-name }}

    - name: Upload artifact purl
      uses: actions/upload-artifact@v4
      with:
        name: artifact-purl${{ inputs.image-suffix }}
        path: artifact-purl.txt

    - name: create safe purl
      run: |
        SAFE_PURL=$(echo -n "$PURL" | jq -s -R -r @uri)
        echo "$SAFE_PURL" > artifact-name-safe.txt
        echo "Safe artifact name: $SAFE_PURL"

    - name: Upload safe artifact purl
      uses: actions/upload-artifact@v4
      with:
        name: artifact-purl-safe${{ inputs.image-suffix }}
        path: artifact-purl-safe.txt    

    # Upload the calculated image tag as an artifact
    - name: Upload image tag
      uses: actions/upload-artifact@v4
      with:
        name: image-tag${{ inputs.image-suffix }}
        path: image-tag.txt

    - name: In-Toto Provenance record stop
      uses: docker://ghcr.io/l3montree-dev/devguard/scanner:main-latest
      with:
        args: devguard-scanner intoto stop --step=build --products=image-digest.txt --products=image-tag.txt --token=${{ secrets.devguard-token }} --apiUrl=${{ inputs.api-url }} --assetName=${{ inputs.asset-name }} --supplyChainId=${{ github.sha }} --generateSlsaProvenance
      continue-on-error: true
      
    - name: Upload SLSA Provenance
      uses: actions/upload-artifact@v4
      with:
        path: build.provenance.json
        name: build${{ inputs.image-suffix }}.provenance.json
