on:
  workflow_call:
    inputs:
      image-destination-path:
        description: 'Destination of the image.tar file'
        type: string
        required: false
        default: "image.tar"
      image:
        description: 'OCI image name, includes the tag name'
        type: string
        required: false
      asset-name:
        description: 'Name of the asset'
        type: string
        required: true
      api-url:
        description: 'URL of the DevGuard API'
        type: string
        required: false
        default: "https://api.main.devguard.org"
      image-suffix:
        description: 'Suffix for the image name. You probably need this if you are building multiple images. For example building a -scanner image and a -web image.'
        type: string
        required: false
        default: ""
      context:
        description: 'Path to the oci context'
        type: string
        required: false
        default: "."
      dockerfile:
        description: 'Path to the Dockerfile'
        type: string
        required: false
        default: "Dockerfile"
      artifact-suffix:
        description: 'This is only needed if you are using this job multiple times in the same workflow. For example if you are building multiple images from the same source with different configuration.'
        type: string
        required: false
        default: ""
    secrets:
      devguard-token:
        description: 'DevGuard API token'
        required: true

jobs:
  build-image:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: In-Toto Provenance record start
      id: in-toto-start
      uses: docker://ghcr.io/l3montree-dev/devguard-scanner:main-8c0b4fe6-1732432851
      with:
        args: devguard-scanner intoto start --step=build --token=${{ secrets.devguard-token }}

    # Calculate a tag name
    # If the image input is provided, use it as the tag
    # If the workflow is triggered by a tag, use the tag as the tag
    # Otherwise built GitOps compatible tags. Fallback to the branch name, commit hash, and timestamp. Those tags are sortable and  unique.
    - name: Set IMAGE_TAG
      run: |
        if [ "${{ inputs.image }}" != "" ]; then
          IMAGE_TAG="${{ inputs.image }}"
        elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
          IMAGE_TAG="ghcr.io/${{ github.repository }}${{ inputs.image-suffix }}:${GITHUB_REF#refs/tags/}"
        else
          branch=${GITHUB_REF##*/}
          sha=${GITHUB_SHA::8}
          ts=$(date +%s)
          IMAGE_TAG="ghcr.io/${{ github.repository }}${{ inputs.image-suffix }}:${branch}-${sha}-${ts}"
        fi
        echo "$IMAGE_TAG" > image-tag.txt

        # necessary for the kaniko job
        echo "IMAGE_TAG=$(cat image-tag.txt)" >> $GITHUB_ENV

    - name: Build Docker image with Kaniko
      # Building the Docker image using Kaniko
      id: build_image
      uses: docker://gcr.io/kaniko-project/executor:v1.23.0
      with:
        args: --destination=${{ env.IMAGE_TAG }} --context=${{ inputs.context }} --dockerfile=${{ inputs.dockerfile }} --no-push --tarPath /github/workspace/tmp-image.tar

    - name: Move the image.tar to the destination path
      run: mv tmp-image.tar ${{ inputs.image-destination-path }}

    - name: Setup crane
      uses: imjasonh/setup-crane@v0.1

    - name: Use crane to get the digest
      run: crane digest --tarball=${{ inputs.image-destination-path }} > image-digest.txt

    # Uploading the built Docker image as an artifact
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: oci-image${{ inputs.artifact-suffix }}
        path: ${{ inputs.image-destination-path }}

    # Uploading the built Docker image digest as an artifact
    - name: Upload digest
      uses: actions/upload-artifact@v4
      with:
        name: image-digest${{ inputs.artifact-suffix }}
        path: image-digest.txt

    # Upload the calculated image tag as an artifact
    - name: Upload image tag
      uses: actions/upload-artifact@v4
      with:
        name: image-tag${{ inputs.artifact-suffix }}
        path: image-tag.txt

    - name: In-Toto Provenance record stop
      uses: docker://ghcr.io/l3montree-dev/devguard-scanner:main-8c0b4fe6-1732432851
      with:
        args: devguard-scanner intoto stop --step=build --products=image-digest.txt --products=image-tag.txt --products=${{ inputs.image-destination-path }} --token=${{ secrets.devguard-token }} --apiUrl=${{ inputs.api-url }} --assetName=${{ inputs.asset-name }}

    - name: Upload in-toto metadata
      uses: actions/upload-artifact@v4
      with:
        name: in-toto-build-link
        path: build.????????.link
