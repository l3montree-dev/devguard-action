on:
  workflow_call:
    inputs:
      asset-name:
        description: 'Name of the asset to be deployed'
        type: string
        required: true
      api-url:
        description: 'URL of the DevGuard API'
        type: string
        required: false
        default: 'https://api.main.devguard.org'
      should-deploy:
        # Input to determine if the deploy job should run
        description: 'Should the deploy job run'
        type: boolean
        required: false
        default: true
      image-already-in-registry:
        # Input to determine if the image is already in the registry
        description: 'If set to true, the image wont be pushed again'
        type: boolean
        required: false
        default: false
      artifact-suffix:
        # Prefix for the artifacts
        description: 'Prefix of the artifacts. This is only needed if you are using this job multiple times in the same workflow. For example if you are deploying multiple images with different configuration.'
        type: string
        required: false
        default: ''
      image-suffix:
        # Suffix for the image name
        description: 'Suffix for the image name. You probably need this if you are building multiple images. For example building a -scanner image and a -web image.'
        type: string
        required: false
        default: ''
    secrets:
      devguard-token:
        description: 'DevGuard API token'
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: inputs.should-deploy
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
        persist-credentials: true
    - name: Download oci-image artifact (can be created by build-image)
      uses: actions/download-artifact@v4
      with:
        name: oci-image${{ inputs.artifact-suffix }}
        path: .
      if: inputs.image-already-in-registry == false

    - name: Download image-tag artifact (can be created by build-image)
      uses: actions/download-artifact@v4
      with:
        name: image-tag${{ inputs.artifact-suffix }}
        path: .

    - name: Download image-digest artifact (can be created by build-image)
      uses: actions/download-artifact@v4
      with:
        name: image-digest${{ inputs.artifact-suffix }}
        path: .

    - name: Read image-digest.txt
      id: read-digest
      run: echo "DIGEST=$(cat image-digest.txt)" >> $GITHUB_ENV
    
    - name: In-Toto Provenance run
      uses: docker://ghcr.io/l3montree-dev/devguard-scanner:0.12.3
      with:
        args: devguard-scanner intoto run --step=deploy --materials=image-tag.txt --products=image-tag.txt --products=image-digest.txt --token=${{ secrets.devguard-token }} --apiUrl=${{ inputs.api-url }} --assetName=${{ inputs.asset-name }} --supplyChainId=${{ github.sha }} --supplyChainOutputDigest="${{ env.DIGEST }}"
      continue-on-error: true

    - name: Setup crane
      uses: imjasonh/setup-crane@v0.1

    - name: Push oci image to GitHub image Registry
      run: crane push image.tar $(cat image-tag.txt)
      if: inputs.image-already-in-registry == false

    - name: Push oci image to GitHub image Registry with latest
      run: |
        branch=${GITHUB_REF##*/}
        name="ghcr.io/${{ github.repository }}${IMAGE_SUFFIX}:$branch-latest"
        name=$(echo "$name" | tr '[:upper:]' '[:lower:]')
        crane copy $(cat image-tag.txt) $name
      env:
        IMAGE_SUFFIX: ${{ inputs.image-suffix }}