on:
  workflow_call:
    inputs:
      asset-name:
        description: 'Name of the asset to be deployed'
        type: string
        required: true
      api-url:
        description: 'URL of the DevGuard API'
        type: string
        required: false
        default: 'https://api.main.devguard.org'
      should-deploy:
        # Input to determine if the deploy job should run
        description: 'Should the deploy job run'
        type: boolean
        required: false
        default: true
      artifact-suffix:
        # Prefix for the artifacts
        description: 'Prefix of the artifacts. This is only needed if you are using this job multiple times in the same workflow. For example if you are deploying multiple images with different configuration.'
        type: string
        required: false
        default: ''
    secrets:
      devguard-token:
        description: 'DevGuard API token'
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ inputs.should-deploy }}
    steps:
    - name: Download oci-image artifact (can be created by build-image)
      uses: actions/download-artifact@v4
      with:
        name: oci-image${{ inputs.artifact-suffix }}
        path: .

    - name: Download image-tag artifact (can be created by build-image)
      uses: actions/download-artifact@v4
      with:
        name: image-tag${{ inputs.artifact-suffix }}
        path: .

    - name: Download image-digest artifact (can be created by build-image)
      uses: actions/download-artifact@v4
      with:
        name: image-digest${{ inputs.artifact-suffix }}
        path: .

    - name: In-Toto Provenance run
      uses: docker://ghcr.io/l3montree-dev/devguard-scanner:main-latest
      with:
        args: devguard-scanner intoto run --step=deploy --materials=image.tar --materials=image-tag.txt --products=image-tag.txt --products=image-digest.txt --token=${{ secrets.devguard-token }} --apiUrl=${{ inputs.api-url }} --assetName=${{ inputs.asset-name }} --supplyChainId=${{ github.sha }}

    - name: Setup crane
      uses: imjasonh/setup-crane@v0.1

    - name: Push oci image to GitHub image Registry
      run: crane push image.tar $(cat image-tag.txt)

    - name: Push oci image to GitHub image Registry with latest 
      run: |
        branch=${GITHUB_REF##*/}
        crane push image.tar "$branch-latest"