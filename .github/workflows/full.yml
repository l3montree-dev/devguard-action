name: Full DevGuard Scan
on:
  workflow_call:
    inputs:
      asset-name:
        description: 'Name of the asset to be scanned'
        type: string
        required: true

      api-url:
        type: string
        required: false
        default: "https://api.main.devguard.org"

      path:
        description: 'Path to the source code to be scanned'
        type: string
        required: false
        default: "/github/workspace"
      
      disable-artifact-registry-as-image-store:
        required: false
        default: false
        type: boolean
        description: "If the artifact size is too big for your github usage quota, set this to true. This will push the image directly to the registry instead of uploading it as artifact."

      image-destination-path:
        description: 'Path to the oci image to be scanned. Only necessary if deploy reusable workflow is not used and you would like to do further processing of the builded image.tar'
        type: string
        required: false
        default: "image.tar"

      image:
        description: 'oci image tag'
        type: string
        required: false
      should-deploy:
        description: 'Should the deploy job run - publishing the image to the desired Container Registry'
        type: boolean
        required: false
        default: true
      image-suffix:
        # Suffix for the image name
        description: 'Suffix for the image name. You probably need this if you are building multiple images. For example building a -scanner image and a -web image.'
        type: string
        required: false
        default: ''
      fail-on-risk:
        description: 'Fail the job if a risk is higher than the configured threshold, e.g. critical, high, medium, low'
        type: string
        required: false

      fail-on-cvss:
        description: 'Fail the job if a CVSS score is higher than the configured threshold, e.g. critical, high, medium, low'
        type: string
        required: false


    secrets:
      devguard-token:
        description: 'DevGuard API token'
        required: true
      build-args:
        description: 'Build arguments. Useful to overwrite context and dockerfile. Maybe even add additional build args.'
        required: false


permissions:
  contents: read
  packages: write

jobs:
  call-secret-scanning:
    uses: ./.github/workflows/secret-scanning.yml
    with:
      asset-name: ${{ inputs.asset-name }}
      api-url: ${{ inputs.api-url }}
      path: ${{ inputs.path }}
    secrets:
      devguard-token: ${{ secrets.devguard-token }}

  call-sast:
    uses: ./.github/workflows/sast.yml
    with:
      asset-name: ${{ inputs.asset-name }}
      api-url: ${{ inputs.api-url }}
      path: ${{ inputs.path }}
    secrets:
      devguard-token: ${{ secrets.devguard-token }}

  call-iac:
    uses: ./.github/workflows/iac.yml
    with:
      asset-name: ${{ inputs.asset-name }}
      api-url: ${{ inputs.api-url }}
      path: ${{ inputs.path }}
    secrets:
      devguard-token: ${{ secrets.devguard-token }}

  call-software-compsition-analysis:
    uses: ./.github/workflows/software-composition-analysis.yml
    with:
      asset-name: ${{ inputs.asset-name }}
      api-url: ${{ inputs.api-url }}
      path: ${{ inputs.path }}
      fail-on-risk: ${{ inputs.fail-on-risk }}
      fail-on-cvss: ${{ inputs.fail-on-cvss }}
    secrets:
      devguard-token: ${{ secrets.devguard-token }}

  call-build-image:
    uses: ./.github/workflows/build-image.yml
    with:
      image-destination-path: ${{ inputs.image-destination-path }}
      image: ${{ inputs.image }}
      asset-name: ${{ inputs.asset-name }}
      api-url: ${{ inputs.api-url }}
      disable-artifact-registry-as-image-store: ${{ inputs.disable-artifact-registry-as-image-store }}
    secrets:
      devguard-token: ${{ secrets.devguard-token }}
      build-args: ${{ secrets.build-args }}

  call-container-scanning:
    needs: call-build-image
    uses: ./.github/workflows/container-scanning.yml
    with:
      asset-name: ${{ inputs.asset-name }}
      api-url: ${{ inputs.api-url }}
      image-path: ${{ inputs.image-destination-path }}
      fetch-image-from-registry: ${{ inputs.disable-artifact-registry-as-image-store }}
      fail-on-risk: ${{ inputs.fail-on-risk }}
      fail-on-cvss: ${{ inputs.fail-on-cvss }}
    secrets:
      devguard-token: ${{ secrets.devguard-token }}

  call-deploy:
    needs:
    - call-build-image
    - call-container-scanning
    - call-software-compsition-analysis
    - call-sast
    - call-secret-scanning
    - call-iac
    uses: ./.github/workflows/deploy.yml
    with:
      should-deploy: ${{ inputs.should-deploy }}
      asset-name: ${{ inputs.asset-name }}
      api-url: ${{ inputs.api-url }}
      image-suffix: ${{ inputs.image-suffix }}
      image-already-in-registry: ${{ inputs.disable-artifact-registry-as-image-store }}
    secrets:
      devguard-token: ${{ secrets.devguard-token }}

  call-sign:
    needs:
    - call-build-image
    - call-container-scanning
    - call-software-compsition-analysis
    - call-sast
    - call-secret-scanning
    - call-iac
    uses: ./.github/workflows/sign.yml
    with:
      api-url: ${{ inputs.api-url }}
      asset-name: ${{ inputs.asset-name }}
    secrets:
      devguard-token: ${{ secrets.devguard-token }}

  call-attest:
    needs:
    - call-build-image
    - call-container-scanning
    - call-software-compsition-analysis
    - call-sast
    - call-secret-scanning
    - call-iac
    uses: ./.github/workflows/attest.yml
    with:
      api-url: ${{ inputs.api-url }}
      asset-name: ${{ inputs.asset-name }}
      artifact-suffix: ${{ inputs.image-suffix }}
    secrets:
      devguard-token: ${{ secrets.devguard-token }}